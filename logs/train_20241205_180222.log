[2024-12-05 18:02:22] INFO - train: Starting training process...
[2024-12-05 18:02:22] INFO - train: Loading configurations...
[2024-12-05 18:02:22] INFO - train: Using device: cuda
[2024-12-05 18:02:22] INFO - train: Creating data loaders...
[2024-12-05 18:03:02] INFO - train: Setting up models and trainer...
[2024-12-05 18:03:02] INFO - train: Initializing context_aware distillation training...
[2024-12-05 18:03:07] INFO - train: Starting training...
[2024-12-05 18:03:08] ERROR - train: An error occurred: Expected all tensors to be on the same device, but found at least two devices, cuda:0 and cpu! (when checking argument for argument target in method wrapper_CUDA_nll_loss_forward)
Traceback (most recent call last):
  File "/nas2/jieui/class/deepnlp/project/scripts/train.py", line 131, in main
    trainer.train()
  File "/nas2/jieui/class/deepnlp/project/src/trainers/base_trainer.py", line 106, in train
    loss = self._training_step(batch)
  File "/nas2/jieui/class/deepnlp/project/src/trainers/context_aware_distillation_trainer.py", line 69, in _training_step
    qa_loss = self.model.compute_loss(
  File "/nas2/jieui/class/deepnlp/project/src/models/context_aware_distillation.py", line 137, in compute_loss
    start_loss = nn.CrossEntropyLoss()(start_logits, start_positions)
  File "/nas2/jieui/class/deepnlp/deepja/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1501, in _call_impl
    return forward_call(*args, **kwargs)
  File "/nas2/jieui/class/deepnlp/deepja/lib/python3.10/site-packages/torch/nn/modules/loss.py", line 1174, in forward
    return F.cross_entropy(input, target, weight=self.weight,
  File "/nas2/jieui/class/deepnlp/deepja/lib/python3.10/site-packages/torch/nn/functional.py", line 3029, in cross_entropy
    return torch._C._nn.cross_entropy_loss(input, target, weight, _Reduction.get_enum(reduction), ignore_index, label_smoothing)
RuntimeError: Expected all tensors to be on the same device, but found at least two devices, cuda:0 and cpu! (when checking argument for argument target in method wrapper_CUDA_nll_loss_forward)
